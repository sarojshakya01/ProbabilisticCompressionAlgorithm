Programming Assignment 1
Due date: Wednesday, 25 September 2019, 11:59 PM
Requested files: main.cpp (Download)
Type of work: Individual work
Reduction by automatic evaluation: 5 Free evaluations: 4
COSC 3360 – Operating System Fundamentals 
Assignment #1 for Fall 2019: The parallel compression algorithm. 
Similarity Threshold: 85%

Objective 
 
This assignment will introduce you to the process creation mechanism in UNIX using the fork function. 
 
Specifications 
 
You must write a program to implement a parallel version of the compression algorithm proposed by Rincon et al. in 2008 (A Probabilistic Compression Algorithm based on Symbols Position). The algorithm uses the symbols’ position in the message to generate its code. To that end, a bit word is used to store the position of a particular symbol in the message. Each symbol is associated with such a binary string and it is this information, which is ultimately stored. 
 
Your program will receive from STDIN the message that the user wants to compress. After calculating the frequency of each symbol in the message, your program must create a child process per each different symbol in the message. Each child process will receive from the parent process the information needed to generate the code of the assigned symbol. Finally, the parent process will print the information (step by step) about the compression process.
 
Input Format: Your program should read its input from stdin (C++ cin) and use input redirection as in: 
 
assignment1 < input1.txt
 
This input file will only have letters, numbers, and the EOL character (that will be represented as <EOL>). 
 
Implementation 
 
You will have two types of processes:
 
Parent process: is the process that reads the input file, calculates and prints the frequency of the symbols in the message, creates the child processes (passing the information about the symbol and message to generate the code of the symbol), waits for all the child processes to complete their execution, and prints the information about the compression process (see the example below). 
 
Child processes: these are the processes created by the parent process. Each child process will perform the following operations: receives the information from the parent process (symbol and message), generates the code of the assigned symbol by the parent, and saves the generated code into a file. The child processes will not print any information into STDOUT.
 
For a message equal to “aaaannnaaakkllaaaaap”, the corresponding output is:    
 
a frequency = 12
n frequency = 3
k frequency = 2
l frequency = 2
p frequency = 1
Original Message:       aaaannnaaakkllaaaaap
Symbol a code:		11110001110000111110
Remaining Message:	nnnkkllp
Symbol n code:		11100000
Remaining Message:	kkllp
Symbol k code:		11000
Remaining Message:	llp
Symbol l code:		110
Remaining Message:	p
Symbol p code:		1
 
HINTS:
 
You can safely assume that the input files will always be in the proper format and that the maximum number of symbols used to create a message is 100.
You must use the format from the previous example when writing information into STDOUT.
The parent must use the files generated by the child process to print the code of each symbol.
The parent will use the frequency of the symbol as a priority to sort the symbols used by the algorithm (the higher the frequency, the higher the priority). If two or more symbols have the same frequency, the parent process will use the ASCII value of the symbols as a priority to break the tie (the lowest the ASCII value, the highest the priority).

These specifications were written on Wednesday, August 28, 2019. Please refer to the course web site for corrections and updates. 


